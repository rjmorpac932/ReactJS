{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jjimemon\\\\Desktop\\\\DAW\\\\Segundo\\\\HLC\\\\ProyectosReact\\\\ProyectoPracticas\\\\ReactJS\\\\src\\\\ComponentesP2\\\\Actualizacion.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './styles/Actualizacion.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Actualizacion() {\n  _s();\n  // Registros de la tabla de actualización\n\n  const data = [{\n    id: 1,\n    nombre: 'Ana Alicia',\n    apellidos: 'López Vázquez',\n    editing: false\n  }, {\n    id: 2,\n    nombre: 'Pablo',\n    apellidos: 'Márquez Gómez',\n    editing: false\n  }, {\n    id: 3,\n    nombre: 'Jose Antonio',\n    apellidos: 'Vergara Sánchez',\n    editing: false\n  }, {\n    id: 4,\n    nombre: 'Carmen',\n    apellidos: 'Sánchez Martínez Segura',\n    editing: false\n  }, {\n    id: 5,\n    nombre: 'Adrían',\n    apellidos: 'Martínez',\n    editing: false\n  }, {\n    id: 6,\n    nombre: 'Tibu',\n    apellidos: 'Mayo González',\n    editing: false\n  }];\n\n  /* \r\n    Estado para manejar los estados de los campos del formulario\r\n    y los errores de validación de los campos de texto\r\n  */\n\n  const [formData, setFormData] = useState(data);\n  const [errors, setErrors] = useState({});\n\n  /*\r\n    La funcion handleEdit se ejecuta cuando se hace click en Editar o en Guardar. Cuando se hace click en Editar, \r\n    el valor de editing del registro pasa a ser true, y cuando se hace click en Guardar, el valor de editing pasa \r\n    a ser false. Si el valor de editing es true, se muestra el campo editable, y si es false, se muestra el campo\r\n    no editable.\r\n  */\n\n  /*\r\n  La funcion tiene como parametro el id del registro que se quiere editar, y dentro, se llama a la funcion setFormData\r\n  que recibe como parametro una funcion que tiene como parametro el estado anterior. Dentro de esta funcion, se llama\r\n  al metodo map que recorre el array prevData. Si el id del registro es igual al id que se pasa como parametro, se\r\n  cambia el valor de la propiedad editing. Si el id del registro es distinto al id que se pasa como parametro, se\r\n  devuelve el registro sin modificar.\r\n  */\n\n  const handleEdit = id => {\n    setFormData(prevData => prevData.map(item => {\n      if (item.id === id) {\n        return {\n          ...item,\n          editing: !item.editing\n        };\n      } else {\n        return item;\n      }\n    }));\n  };\n\n  /*\r\n    La funcion handleInputChange se ejecuta cuando se hace un cambio en los campos de texto. Se usa en el evento onChange de los inputs del \r\n    formulario. Además, se manejan los errores de validación de los campos, en este caso, solo se admiten caracteres alfabéticos en los \r\n    campos nombre y apellidos.\r\n  */\n\n  /*\r\n  La funcion tiene como parametros el evento y el id del registro que se quiere editar. Luego se recupera el nombre y el valor del input\r\n  que ha cambiado. Después, se llama a la funcion setFormData que recibe como parametro una funcion que tiene como parametro el estado\r\n  anterior. Dentro de esta funcion, se llama al metodo map que recorre el array prevData. Si el id del registro es igual al id que se\r\n  pasa como parametro, se devuelve el registro con el valor del campo que ha cambiado. Si el id del registro es distinto al id que se\r\n  pasa como parametro, se devuelve el registro sin modificar.\r\n  */\n\n  /*\r\n  Si el nombre del campo es nombre o apellidos, se crea una expresión regular que solo permite caracteres alfabéticos. Si el valor del campo \r\n  de entrada coincide con la expresión regular, se actualiza el estado errors con un mensaje de error para ese campo. Si el valor del campo\r\n  de entrada no coincide con la expresión regular, crea una variable rest que contiene el estado errors sin el campo que ha cambiado y asi \r\n  se elimina el mensaje de error para ese campo.\r\n  */\n\n  const handleInputChange = (event, id) => {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormData(prevData => prevData.map(item => {\n      if (item.id === id) {\n        return {\n          ...item,\n          [name]: value\n        };\n      }\n      return item;\n    }));\n\n    // Validación de los campos de texto\n    if (name === 'nombre' || name === 'apellidos') {\n      if (/[^a-zA-Z\\s]/.test(value)) {\n        setErrors(prevErrors => ({\n          ...prevErrors,\n          [name]: 'Solo se admiten caracteres alfabéticos'\n        }));\n      } else {\n        setErrors(prevErrors => {\n          //\n          const {\n            [name]: _,\n            ...rest\n          } = prevErrors;\n          return rest;\n        });\n      }\n    }\n  };\n\n  /*Función handleChange que se ejecuta cuando se hace click sobre Guardar. \r\n    Tiene como parámetro el id del registro a editar. Busca el registro con el id que se pasa \r\n    como parámetro y accede a sus propiedades nombre y apellidos para mostrarlos en la consola y ejecutar la sentencia SQL de actualización.\r\n    Por último, se llama a la función handleEdit para cambiar el valor de editing a false para ese registro\r\n    y que sus campos no sean editables.\r\n  */\n\n  const handleSave = id => {\n    const item = formData.find(item => item.id === id);\n    console.log(`UPDATE alumnos SET nombre = '${item.nombre}', apellidos = '${item.apellidos}' WHERE id = ${id};`);\n    handleEdit(id);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Edici\\xF3n de usuarios\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"th-nombre\",\n              children: \"Nombre\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"th-apellido\",\n              children: \"Apellidos\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"th-editar\",\n              children: \"Editar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: formData.map(item =>\n          /*#__PURE__*/\n          // A cada fila le asigna como key el id del objeto\n          _jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.editing ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  name: \"nombre\",\n                  value: item.nombre,\n                  onChange: e => handleInputChange(e, item.id),\n                  onKeyDown: e => console.log(`Tecla presionada: ${e.key}`),\n                  style: {\n                    width: '100%'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 23\n                }, this), errors.nombre && /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: errors.nombre\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 149,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true) :\n              // Si la propiedad editing del objeto es false, muestra el campo no editable\n              item.nombre\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.editing ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  name: \"apellidos\",\n                  value: item.apellidos,\n                  onChange: e => handleInputChange(e, item.id),\n                  style: {\n                    width: '100%'\n                  },\n                  onKeyDown: e => console.log(`Tecla presionada: ${e.key}`)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 160,\n                  columnNumber: 23\n                }, this), errors.apellidos && /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: errors.apellidos\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 44\n                }, this)]\n              }, void 0, true) :\n              // Si la propiedad editing del objeto es false, muestra el campo no editable\n              item.apellidos\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-primary\",\n                onClick: () => item.editing ? handleSave(item.id) : handleEdit(item.id),\n                children: item.editing ? 'Guardar' : 'Editar'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 17\n            }, this)]\n          }, item.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n_s(Actualizacion, \"GlYaSZCswbG3laD4s4jjgC38X6w=\");\n_c = Actualizacion;\nexport default Actualizacion;\nvar _c;\n$RefreshReg$(_c, \"Actualizacion\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Actualizacion","_s","data","id","nombre","apellidos","editing","formData","setFormData","errors","setErrors","handleEdit","prevData","map","item","handleInputChange","event","name","value","target","test","prevErrors","_","rest","handleSave","find","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","onKeyDown","key","style","width","onClick","_c","$RefreshReg$"],"sources":["C:/Users/jjimemon/Desktop/DAW/Segundo/HLC/ProyectosReact/ProyectoPracticas/ReactJS/src/ComponentesP2/Actualizacion.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './styles/Actualizacion.css';\r\n\r\nfunction Actualizacion() {\r\n\r\n  // Registros de la tabla de actualización\r\n\r\n  const data = [\r\n    { id: 1, nombre: 'Ana Alicia', apellidos: 'López Vázquez', editing: false },\r\n    { id: 2, nombre: 'Pablo', apellidos: 'Márquez Gómez', editing: false },\r\n    { id: 3, nombre: 'Jose Antonio', apellidos: 'Vergara Sánchez', editing: false },\r\n    { id: 4, nombre: 'Carmen', apellidos: 'Sánchez Martínez Segura', editing: false },\r\n    { id: 5, nombre: 'Adrían', apellidos: 'Martínez', editing: false },\r\n    { id: 6, nombre: 'Tibu', apellidos: 'Mayo González', editing: false },\r\n  ];\r\n\r\n  /* \r\n    Estado para manejar los estados de los campos del formulario\r\n    y los errores de validación de los campos de texto\r\n  */\r\n\r\n  const [formData, setFormData] = useState(data);\r\n  const [errors, setErrors] = useState({});\r\n\r\n  /*\r\n    La funcion handleEdit se ejecuta cuando se hace click en Editar o en Guardar. Cuando se hace click en Editar, \r\n    el valor de editing del registro pasa a ser true, y cuando se hace click en Guardar, el valor de editing pasa \r\n    a ser false. Si el valor de editing es true, se muestra el campo editable, y si es false, se muestra el campo\r\n    no editable.\r\n  */\r\n\r\n    /*\r\n    La funcion tiene como parametro el id del registro que se quiere editar, y dentro, se llama a la funcion setFormData\r\n    que recibe como parametro una funcion que tiene como parametro el estado anterior. Dentro de esta funcion, se llama\r\n    al metodo map que recorre el array prevData. Si el id del registro es igual al id que se pasa como parametro, se\r\n    cambia el valor de la propiedad editing. Si el id del registro es distinto al id que se pasa como parametro, se\r\n    devuelve el registro sin modificar.\r\n    */\r\n\r\n  const handleEdit = (id) => {\r\n    setFormData((prevData) =>\r\n      prevData.map((item) => {\r\n        if (item.id === id) {\r\n          return {\r\n            ...item,\r\n            editing: !item.editing,\r\n          };\r\n        } else {\r\n          return item;\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  /*\r\n    La funcion handleInputChange se ejecuta cuando se hace un cambio en los campos de texto. Se usa en el evento onChange de los inputs del \r\n    formulario. Además, se manejan los errores de validación de los campos, en este caso, solo se admiten caracteres alfabéticos en los \r\n    campos nombre y apellidos.\r\n  */\r\n\r\n    /*\r\n    La funcion tiene como parametros el evento y el id del registro que se quiere editar. Luego se recupera el nombre y el valor del input\r\n    que ha cambiado. Después, se llama a la funcion setFormData que recibe como parametro una funcion que tiene como parametro el estado\r\n    anterior. Dentro de esta funcion, se llama al metodo map que recorre el array prevData. Si el id del registro es igual al id que se\r\n    pasa como parametro, se devuelve el registro con el valor del campo que ha cambiado. Si el id del registro es distinto al id que se\r\n    pasa como parametro, se devuelve el registro sin modificar.\r\n    */\r\n\r\n    /*\r\n    Si el nombre del campo es nombre o apellidos, se crea una expresión regular que solo permite caracteres alfabéticos. Si el valor del campo \r\n    de entrada coincide con la expresión regular, se actualiza el estado errors con un mensaje de error para ese campo. Si el valor del campo\r\n    de entrada no coincide con la expresión regular, crea una variable rest que contiene el estado errors sin el campo que ha cambiado y asi \r\n    se elimina el mensaje de error para ese campo.\r\n    */\r\n\r\n  const handleInputChange = (event, id) => {\r\n    const { name, value } = event.target;\r\n    setFormData((prevData) =>\r\n      prevData.map((item) => {\r\n        if (item.id === id) {\r\n          return { ...item, [name]: value };\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n\r\n    // Validación de los campos de texto\r\n    if (name === 'nombre' || name === 'apellidos') {\r\n      if (/[^a-zA-Z\\s]/.test(value)) {        \r\n            setErrors((prevErrors) => ({\r\n          ...prevErrors,\r\n          [name]: 'Solo se admiten caracteres alfabéticos',\r\n        }));\r\n      } else {\r\n        setErrors((prevErrors) => {\r\n          //\r\n          const { [name]: _, ...rest } = prevErrors;\r\n          return rest;\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  /*Función handleChange que se ejecuta cuando se hace click sobre Guardar. \r\n    Tiene como parámetro el id del registro a editar. Busca el registro con el id que se pasa \r\n    como parámetro y accede a sus propiedades nombre y apellidos para mostrarlos en la consola y ejecutar la sentencia SQL de actualización.\r\n    Por último, se llama a la función handleEdit para cambiar el valor de editing a false para ese registro\r\n    y que sus campos no sean editables.\r\n  */\r\n\r\n  const handleSave = (id) => {\r\n    const item = formData.find((item) => item.id === id);\r\n    console.log(`UPDATE alumnos SET nombre = '${item.nombre}', apellidos = '${item.apellidos}' WHERE id = ${id};`);\r\n    handleEdit(id);\r\n  };\r\n\r\n  return (\r\n    <div className='main'>\r\n      <div className='container'>\r\n        <br />\r\n        <h1>Edición de usuarios</h1>\r\n        <br />\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th className=\"th-nombre\">Nombre</th>\r\n              <th className=\"th-apellido\">Apellidos</th>\r\n              <th className=\"th-editar\">Editar</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {/* Recorre el array formData y crea una fila por cada objeto del array */}\r\n            {formData.map((item) => (\r\n              // A cada fila le asigna como key el id del objeto\r\n              <tr key={item.id}>\r\n                <td>\r\n                  {/* Si la propiedad editing del objeto es true, muestra el campo editable */}\r\n                  {item.editing ? (\r\n                    <>\r\n                      <input\r\n                        type=\"text\"\r\n                        name=\"nombre\"\r\n                        value={item.nombre}\r\n                        onChange={(e) => handleInputChange(e, item.id)}\r\n                        onKeyDown={(e) => console.log(`Tecla presionada: ${e.key}`)}\r\n                        style={{ width: '100%' }}\r\n                      />\r\n                        {/* Si existe un error para el campo 'nombre', se muestra el mensaje de error */}\r\n                      {errors.nombre && <p>{errors.nombre}</p>}\r\n                    </>\r\n                  ) : (\r\n                    // Si la propiedad editing del objeto es false, muestra el campo no editable\r\n                    item.nombre\r\n                  )}\r\n                </td>\r\n                <td>\r\n                  {/* Si la propiedad editing del objeto es true, muestra el campo editable */}\r\n                  {item.editing ? (\r\n                    <>\r\n                      <input\r\n                        type=\"text\"\r\n                        name=\"apellidos\"\r\n                        value={item.apellidos}\r\n                        onChange={(e) => handleInputChange(e, item.id)}\r\n                        style={{ width: '100%' }}\r\n                        onKeyDown={(e) => console.log(`Tecla presionada: ${e.key}`)}\r\n                      />\r\n                        {/* Si existe un error para el campo 'nombre', se muestra el mensaje de error */}\r\n                      {errors.apellidos && <p>{errors.apellidos}</p>}\r\n                    </>\r\n                  ) : (\r\n                    // Si la propiedad editing del objeto es false, muestra el campo no editable\r\n                    item.apellidos\r\n                  )}\r\n                </td>\r\n                <td>\r\n                {/*Cuando el ítem está en modo de guardar, el botón muestra 'Guardar' y al hacer clic en él, se llama a la función handleSave. \r\n                Cuando el item está en modo de editar, el botón muestra 'Editar' y al hacer clic en él, se llama a la función handleEdit.\r\n                Depende de si la edicion está activada o no. \r\n                */}\r\n                  <button\r\n                    className=\"btn btn-primary\"\r\n                    onClick={() => (item.editing ? handleSave(item.id) : handleEdit(item.id))}\r\n                  >\r\n                    {item.editing ? 'Guardar' : 'Editar'}\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Actualizacion;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}